//! Contains setup code, including applying forcefield data to our specific
//! atoms.

// Notes to square away the 3 "atom name" / "Amber atom type" / "force field type" keys.
// This guide shows Type 1. https://emleddin.github.io/comp-chem-website/AMBERguide-AMBER-atom-types.html,
//
// Update: "Type 1" = "type_in_res" in our code now. "Type 2" = "ff_type" for AAs, and "Type 3" = "ff_type" for small mols.
//
// Type 1 Examples: "CA", "HA", "CZ", "HB3", "HH22", HZ2", "N", "H", "HG3", "O", "CD", "C", "HG23", "CG", "CB", "CG1", "HE2", "HB3",
// Type 1 Sources: `amino19.lib`, col 0. mmCIF atom coordinate files.
//
// Type 2 Examples:  "HC", "C8", "HC", "H"(both), "XC", "N"(both), "H"(both), "H1", "CT", "OH", "HO", "2C",
// Type 2 Sources: `amino19.lib` (AA/protein partial charges), col 1. `frcmod.ff19SB`. (AA/protein params)
//
// Small Mol/lig:
// Type 3 Examples: "oh", "h1", "ca", "o", "os", "c6", "n3", "c3"
// Type 3 Sources: `.mol2` generated by Amber. (Small mol coordinates and partial charges) `gaff2.dat` (Small molg params)
//
// MOl2 for ligands also have "C10", "O7" etc, which is ambiguous here, and not required, as their params
// use Type 3, which is present. It's clear what to do for ligand
//
// Best guess: Type 1 identifies labels within the residue only. Type 2 (AA) and Type 3 (small mol) are the FF types.

use std::{collections::HashSet, time::Instant};

use bio_files::{
    ResidueType,
    amber_params::{
        AngleBendingParams, BondStretchingParams, ForceFieldParamsKeyed, MassParams, VdwParams,
    },
};
#[cfg(feature = "cuda")]
use cudarc::driver::HostSlice;
use itertools::Itertools;
use lin_alg::f64::Vec3;
use na_seq::{AminoAcid, AminoAcidGeneral, AminoAcidProtenationVariant, AtomTypeInRes, Element};

use crate::{
    ComputationDevice, FfParamSet, ProtFFTypeChargeMap,
    docking::{BindingEnergy, ConformationType, prep::DockingSetup},
    dynamics::{
        AtomDynamics, ForceFieldParamsIndexed, MdMode, MdState, ParamError, SnapshotDynamics,
        ambient::SimBox, neighbors::build_neighbors, non_bonded, water_opc::make_water_mols,
    },
    molecule::{Atom, Bond, Ligand, Molecule, Residue, ResidueEnd, build_adjacency_list},
};

// Todo: QC this.
const TEMP_TGT_DEFAULT: f64 = 310.; // Kelvin.

/// Build a single lookup table in which ligand-specific parameters
/// (when given) replace or add to the generic ones.
pub fn merge_params(
    generic: &ForceFieldParamsKeyed,
    lig_specific: Option<&ForceFieldParamsKeyed>,
) -> ForceFieldParamsKeyed {
    // Start with a deep copy of the generic parameters.
    let mut merged = generic.clone();

    if let Some(lig) = lig_specific {
        merged.mass.extend(lig.mass.clone());
        // merged.partial_charges.extend(lig.partial_charges.clone());
        merged.van_der_waals.extend(lig.van_der_waals.clone());

        merged.bond.extend(lig.bond.clone());
        merged.angle.extend(lig.angle.clone());
        merged.dihedral.extend(lig.dihedral.clone());
        merged
            .dihedral_improper
            .extend(lig.dihedral_improper.clone());
    }

    merged
}

/// Helper that reduces repetition. Used for populating all bonded parameters by index.
fn ff_type_from_idx<'a>(
    atoms: &'a [Atom],
    idx: usize,
    descriptor: &str,
) -> Result<&'a String, ParamError> {
    let atom = &atoms[idx];

    atom.force_field_type.as_ref().ok_or_else(|| {
        ParamError::new(&format!(
            "MD failure: Atom missing FF type on {descriptor}: {atom}"
        ))
    })
}

#[derive(Default)]
pub struct HydrogenRigidConstraint {
    /// Atom indices, of the dynamic set.
    pub atom_0: usize,
    pub atom_1: usize,
    /// A cache vs storing r_0. This is the target distance to maintain.
    pub r0_sq: f64,
    /// 1.0 / ai.mass + 1.0 / aj.mass; a cache. Set on the first step.
    pub inv_mass: Option<f64>,
}

#[derive(Default)]
pub enum HydrogenMdType {
    /// Uses Shake and Rattle to fix the hydrogen positions. This allows for a larger timestep,
    /// e.g. 2fs instead of 1fs.
    /// The constraints here are atom indices of each bond to H, and r_0 as defined in the Amber
    /// param data. (We don't need k_b, as the bond is fixed len). The final value is a cached r_0^2
    Fixed(Vec<HydrogenRigidConstraint>),
    /// Uses the same bonded parameters as elsewhere: A spring model
    // We ideally would have `Fixed` as the default, but " the `#[default]` attribute may
    // only be used on unit enum variants"
    #[default]
    Flexible,
}

/// Associate loaded Force field data (e.g. from Amber) into the atom indices used in a specific
/// dynamics sim. This handles combining general and molecule-specific parameter sets, and converting
/// between atom name, and the specific indices of the atoms we're using.
///
/// This code is straightforward if params are available; much of the logic here is related to handling
/// missing parameters.
impl ForceFieldParamsIndexed {
    pub fn new(
        params_general: &ForceFieldParamsKeyed,
        params_specific: Option<&ForceFieldParamsKeyed>,
        atoms: &[Atom],
        bonds: &[Bond],
        adjacency_list: &[Vec<usize>],
        // Mutable, since we load the hydrogen r0s into it, instead of adding bond stretching params
        // in case of fixed hydrogen.
        hydrogen_md_type: &mut HydrogenMdType,
    ) -> Result<Self, ParamError> {
        let mut result = Self::default();

        // Combine the two force field sets. When a value is present in both, refer the lig-specific
        // one.
        let params = merge_params(params_general, params_specific);

        for (i, atom) in atoms.iter().enumerate() {
            let ff_type = match &atom.force_field_type {
                Some(ff_t) => ff_t,
                None => {
                    eprintln!("Atom missing FF type: {atom}");
                    match atom.element {
                        Element::Carbon => {
                            eprintln!(
                                "Indexing: Atom missing FF type: {atom}; Falling back to generic C"
                            );
                            "C"
                        }
                        Element::Nitrogen => {
                            eprintln!(
                                "Indexing: Atom missing FF type: {atom}; Falling back to generic N"
                            );
                            "N"
                        }
                        Element::Oxygen => {
                            eprintln!(
                                "Indexing: Atom missing FF type: {atom}; Falling back to generic O"
                            );
                            "O"
                        }
                        Element::Hydrogen => {
                            eprintln!(
                                "Indexing: Atom missing FF type: {atom}; Falling back to generic H"
                            );
                            "H"
                        }
                        _ => {
                            return Err(ParamError::new(&format!(
                                "MD failure: Atom missing FF type: {atom}"
                            )));
                        }
                    }
                }
            };

            // Mass
            if let Some(mass) = params.mass.get(ff_type) {
                result.mass.insert(i, mass.clone());
            } else {
                if ff_type.starts_with("C") {
                    match params.mass.get("C") {
                        Some(m) => {
                            result.mass.insert(i, m.clone());
                            println!("Using C fallback mass for {ff_type}");
                        }
                        None => {
                            return Err(ParamError::new(&format!(
                                "MD failure: Missing mass params for {ff_type}"
                            )));
                        }
                    }
                } else if ff_type.starts_with("N") {
                    match params.mass.get("N") {
                        Some(m) => {
                            result.mass.insert(i, m.clone());
                            println!("Using N fallback mass for {ff_type}");
                        }
                        None => {
                            return Err(ParamError::new(&format!(
                                "MD failure: Missing mass params for {ff_type}"
                            )));
                        }
                    }
                } else if ff_type.starts_with("O") {
                    match params.mass.get("O") {
                        Some(m) => {
                            result.mass.insert(i, m.clone());
                            println!("Using O fallback mass for {ff_type}");
                        }
                        None => {
                            return Err(ParamError::new(&format!(
                                "MD failure: Missing mass params for {ff_type}"
                            )));
                        }
                    }
                } else {
                    result.mass.insert(
                        i,
                        MassParams {
                            atom_type: "".to_string(),
                            mass: atom.element.atomic_weight(),
                            comment: None,
                        },
                    );

                    println!("Missing mass params on {atom}; using element default.");

                    // return Err(ParamError::new(&format!(
                    //     "MD failure: Missing mass params for {ff_type}"
                    // )));
                }
            }

            // Lennard-Jones / van der Waals
            if let Some(vdw) = params.van_der_waals.get(ff_type) {
                result.van_der_waals.insert(i, vdw.clone());
                // If the key is missing for the given FF type in our loaded data, check for certain
                // special cases.
            } else {
                // ChatGpt seems to think this is the move. I only asked it about "2C", and it inferred
                // I should also map 3C and C8 to this, which is a good sign. Note that the mass values
                // for all 4 of these are present in frcmod.ff19sb.
                if ff_type == "2C" || ff_type == "3C" || ff_type == "C8" {
                    result
                        .van_der_waals
                        .insert(i, params.van_der_waals.get("CT").unwrap().clone());
                } else if ff_type == "CO" {
                    result
                        .van_der_waals
                        .insert(i, params.van_der_waals.get("C").unwrap().clone());
                } else if ff_type == "OXT" {
                    result
                        .van_der_waals
                        .insert(i, params.van_der_waals.get("O2").unwrap().clone());
                } else if ff_type.starts_with("N") {
                    result
                        .van_der_waals
                        .insert(i, params.van_der_waals.get("N").unwrap().clone());
                    println!("Using N fallback VdW for {atom}");
                } else if ff_type.starts_with("O") {
                    result
                        .van_der_waals
                        .insert(i, params.van_der_waals.get("O").unwrap().clone());
                    println!("Using O fallback VdW for {atom}");
                } else {
                    println!("Missing Vdw params for {atom}; setting to 0.");
                    // 0. no interaction.
                    // todo: If this is "CG" etc, fall back to other carbon params instead.
                    result.van_der_waals.insert(
                        i,
                        VdwParams {
                            atom_type: "".to_string(),
                            sigma: 0.,
                            eps: 0.,
                        },
                    );
                }

                // return Err(ParamError::new(&format!(
                //     "MD failure: Missing Van der Waals params for {ff_type}"
                // )));
            }
        }

        // Bond lengths.
        for bond in bonds {
            let (i0, i1) = (bond.atom_0, bond.atom_1);

            let type_0 = ff_type_from_idx(atoms, i0, "Bond")?;
            let type_1 = ff_type_from_idx(atoms, i1, "Bond")?;

            let data = params
                .bond
                .get(&(type_0.clone(), type_1.clone()))
                .or_else(|| params.bond.get(&(type_1.clone(), type_0.clone())))
                .cloned();

            let Some(mut data) = data else {
                // todo: We get this sometimes with glitched mmCIF files that have duplicate atoms
                // todo in slightly different positions.
                eprintln!(
                    "Missing bond parameters for {type_0}-{type_1} on {} - {}. Using a safe default.",
                    atoms[i0], atoms[i1]
                );
                result.bond_stretching.insert(
                    (i0.min(i1), i0.max(i1)),
                    BondStretchingParams {
                        atom_types: (String::new(), String::new()),
                        k_b: 300.,
                        r_0: (atoms[i0].posit - atoms[i1].posit).magnitude() as f32,
                        comment: None,
                    },
                );
                continue;
            };

            let atom_0 = i0.min(i1);
            let atom_1 = i0.max(i1);

            // If using fixed hydrogens, don't add these to our bond stretching params;
            // add to a separate hydrogen rigid param variable.
            if let HydrogenMdType::Fixed(constraints) = hydrogen_md_type {
                if atoms[bond.atom_0].element == Element::Hydrogen
                    || atoms[bond.atom_1].element == Element::Hydrogen
                {
                    constraints.push(HydrogenRigidConstraint {
                        atom_0,
                        atom_1,
                        r0_sq: (data.r_0 as f64).powi(2),
                        inv_mass: None, // Populated on the first step; we don't have mass yet.
                    });

                    // `bonds_topology` exists separately from `bond_params` specifically so we can
                    // account for bonds to H in exclusions.
                    result.bonds_topology.insert((atom_0, atom_1));

                    continue;
                }
            }

            // This prevents multiplying by 2 each computation at runtime.
            data.k_b *= 2.0;

            result.bond_stretching.insert((atom_0, atom_1), data);

            result.bonds_topology.insert((atom_0, atom_1));
        }

        // Valence angles: Every connection between 3 atoms bonded linearly.
        for (ctr, neighbors) in adjacency_list.iter().enumerate() {
            if neighbors.len() < 2 {
                continue;
            }
            for (&n0, &n1) in neighbors.iter().tuple_combinations() {
                let type_n0 = ff_type_from_idx(atoms, n0, "Angle")?;
                let type_ctr = ff_type_from_idx(atoms, ctr, "Angle")?;
                let type_n1 = ff_type_from_idx(atoms, n1, "Angle")?;

                let mut data = match params.angle.get(&(
                    type_n0.clone(),
                    type_ctr.clone(),
                    type_n1.clone(),
                )) {
                    Some(param) => param.clone(),
                    // Try the other atom order.
                    None => {
                        match params.angle.get(&(
                            type_n1.clone(),
                            type_ctr.clone(),
                            type_n0.clone(),
                        )) {
                            Some(param) => param.clone(),
                            None => {
                                // todo: Get to the bottom of this.
                                // todo: In at least some cases, it's caused by duplicate atoms in the MMCIf file. Consider
                                // todo: sanitizing it on load.
                                println!(
                                    "Missing valence angle params {type_n0}-{type_ctr}-{type_n1} on {} - {} - {}. Using a safe default.",
                                    atoms[n0], atoms[ctr], atoms[n1]
                                );
                                // parm19.dat, HC-CT-HC
                                AngleBendingParams {
                                    atom_types: (String::new(), String::new(), String::new()),
                                    k: 35.,
                                    theta_0: 1.91113,
                                    comment: None,
                                }
                            }
                        }
                    }
                };

                // This prevents multiplying by 2 each computation at runtime.
                data.k *= 2.0;

                result.angle.insert((n0, ctr, n1), data);
            }
        }

        // Proper and improper dihedral angles.
        let mut seen = HashSet::<(usize, usize, usize, usize)>::new();

        // Proper dihedrals: Atoms 1-2-3-4 bonded linearly
        for (i1, nbr_j) in adjacency_list.iter().enumerate() {
            for &i2 in nbr_j {
                if i1 >= i2 {
                    continue;
                } // handle each j-k bond once

                for &i0 in adjacency_list[i1].iter().filter(|&&x| x != i2) {
                    for &i3 in adjacency_list[i2].iter().filter(|&&x| x != i1) {
                        if i0 == i3 {
                            continue;
                        }

                        // Canonicalise so (i1, i2) is always (min, max)
                        let idx_key = if i1 < i2 {
                            (i0, i1, i2, i3)
                        } else {
                            (i3, i2, i1, i0)
                        };
                        if !seen.insert(idx_key) {
                            continue;
                        }

                        let type_0 = ff_type_from_idx(atoms, i0, "Dihedral")?;
                        let type_1 = ff_type_from_idx(atoms, i1, "Dihedral")?;
                        let type_2 = ff_type_from_idx(atoms, i2, "Dihedral")?;
                        let type_3 = ff_type_from_idx(atoms, i3, "Dihedral")?;

                        if let Some(dihe) = params.get_dihedral(
                            &(
                                type_0.clone(),
                                type_1.clone(),
                                type_2.clone(),
                                type_3.clone(),
                            ),
                            true,
                        ) {
                            let mut dihe = dihe.clone();
                            // Divide here; then don't do it during the dyamics run.
                            dihe.barrier_height /= dihe.divider as f32;
                            dihe.divider = 1;
                            result.dihedral.insert(idx_key, dihe);
                        } else {
                            return Err(ParamError::new(&format!(
                                "MD failure: Missing dihedral params for {type_0}-{type_1}-{type_2}-{type_3}"
                            )));
                        }
                    }
                }
            }
        }

        // Improper dihedrals 2-1-3-4. Atom 3 is the hub, with the other 3 atoms bonded to it.
        // The order of the others in the angle calculation affects the sign of the result.
        // Generally only for planar configs.
        //
        // Note: The sattelites are expected to be in alphabetical order, re their FF types.
        // So, for the hub of "ca" with sattelites of "ca", "ca", and "os", the correct combination
        // to look for in the params is "ca-ca-ca-os"
        for (ctr, satellites) in adjacency_list.iter().enumerate() {
            if satellites.len() < 3 {
                continue;
            }

            // Unique unordered triples of neighbours
            for a in 0..satellites.len() - 2 {
                for b in a + 1..satellites.len() - 1 {
                    for d in b + 1..satellites.len() {
                        let (sat0, sat1, sat2) = (satellites[a], satellites[b], satellites[d]);

                        let idx_key = (sat0, sat1, ctr, sat2); // order is fixed → no swap
                        if !seen.insert(idx_key) {
                            continue;
                        }

                        let t0 = ff_type_from_idx(atoms, sat0, "Improper dihedral")?;
                        let t1 = ff_type_from_idx(atoms, sat1, "Improper dihedral")?;
                        let t_ctr = ff_type_from_idx(atoms, ctr, "Improper dihedral")?;
                        let t2 = ff_type_from_idx(atoms, sat2, "Improper dihedral")?;

                        // Sort satellites alphabetically; required to ensure we don't miss combinations.
                        let mut sat_types = [t0.clone(), t1.clone(), t2.clone()];
                        sat_types.sort();

                        let key = (
                            sat_types[0].clone(),
                            sat_types[1].clone(),
                            t_ctr.clone(),
                            sat_types[2].clone(),
                        );

                        // In the case of improper, unlike all other param types, we are allowed to
                        // have missing values. Impropers areonly, by Amber convention, for planar
                        // hub and spoke setups, so non-planar ones will be omitted. These may occur,
                        // for example, at ring intersections.
                        if let Some(dihe) = params.get_dihedral(
                            // &(t0.clone(), t1.clone(), t_ctr.clone(), t2.clone()),
                            &key, false,
                        ) {
                            let mut dihe = dihe.clone();
                            // Generally, there is no divisor for impropers, but set it up here
                            // to be more general.
                            dihe.barrier_height /= dihe.divider as f32;
                            dihe.divider = 1;

                            // println!("\nAdding improper: {:?}", dihe);

                            result.improper.insert(idx_key, dihe);
                        }
                    }
                }
            }
        }

        Ok(result)
    }
}

/// Populate forcefield type, and partial charge.
/// `residues` must be the full set; this is relevant to how we index it.
pub fn populate_ff_and_q(
    atoms: &mut [Atom],
    residues: &[Residue],
    ff_type_charge: &ProtFFTypeChargeMap,
) -> Result<(), ParamError> {
    for atom in atoms {
        if atom.hetero {
            continue;
        }

        let Some(res_i) = atom.residue else {
            return Err(ParamError::new(&format!(
                "MD failure: Missing residue when populating ff name and q: {atom}"
            )));
        };

        let Some(type_in_res) = &atom.type_in_res else {
            return Err(ParamError::new(&format!(
                "MD failure: Missing type in residue for atom: {atom}"
            )));
        };

        let atom_res_type = &residues[res_i].res_type;

        let ResidueType::AminoAcid(aa) = atom_res_type else {
            // e.g. water or other hetero atoms; skip.
            continue;
        };

        // todo: Eventually, determine how to load non-standard AA variants from files; set up your
        // todo state to use those labels. They are available in the params.
        let aa_gen = AminoAcidGeneral::Standard(*aa);

        let charge_map = match residues[res_i].end {
            ResidueEnd::Internal => &ff_type_charge.internal,
            ResidueEnd::NTerminus => &ff_type_charge.n_terminus,
            ResidueEnd::CTerminus => &ff_type_charge.c_terminus,
            ResidueEnd::Hetero => {
                return Err(ParamError::new(&format!(
                    "Error: Encountered hetero atom when parsing amino acid FF types: {atom}"
                )));
            }
        };

        let charges = match charge_map.get(&aa_gen) {
            Some(c) => c,
            // A specific workaround to plain "HIS" being absent from amino19.lib (2025.
            // Choose one of "HID", "HIE", "HIP arbitrarily.
            // todo: Re-evaluate this, e.g. which one of the three to load.
            None if aa_gen == AminoAcidGeneral::Standard(AminoAcid::His) => charge_map
                .get(&AminoAcidGeneral::Variant(AminoAcidProtenationVariant::Hid))
                .ok_or_else(|| ParamError::new("Unable to find AA mapping"))?,
            None => return Err(ParamError::new("Unable to find AA mapping")),
        };

        let mut found = false;

        for charge in charges {
            // todo: Note that we have multiple branches in some case, due to Amber names like
            // todo: "HYP" for variants on AAs for different protenation states. Handle this.
            if &charge.type_in_res == type_in_res {
                atom.force_field_type = Some(charge.ff_type.clone());
                atom.partial_charge = Some(charge.charge);

                found = true;
                break;
            }
        }

        // Code below is mainly for the case of missing data; otherwise, the logic for this operation
        // is complete.

        if !found {
            match type_in_res {
                // todo: This is a workaround for having trouble with H types. LIkely
                // todo when we create them. For now, this meets the intent.
                AtomTypeInRes::H(_) => {
                    // Note: We've witnessed this due to errors in the mmCIF file, e.g. on ASP #88 on 9GLS.
                    eprintln!(
                        "Error assigning FF type and q based on atom type in res: Failed to match H type. #{}, {type_in_res}, {aa_gen:?}. \
                         Falling back to a generic H",
                        &residues[res_i].serial_number
                    );

                    for charge in charges {
                        if &charge.type_in_res == &AtomTypeInRes::H("H".to_string())
                            || &charge.type_in_res == &AtomTypeInRes::H("HA".to_string())
                        {
                            atom.force_field_type = Some("HB2".to_string());
                            atom.partial_charge = Some(charge.charge);

                            found = true;
                            break;
                        }
                    }
                }
                // // This is an N-terminal oxygen of a C-terminal carboxyl group.
                // // todo: You should parse `aminoct12.lib`, and `aminont12.lib`, then delete this.
                // AtomTypeInRes::OXT => {
                //     match atom_res_type {
                //         // todo: QC that it's the N-terminal Met too, or return an error.
                //         ResidueType::AminoAcid(AminoAcid::Met) => {
                //             atom.force_field_type = Some("O2".to_owned());
                //             // Fm amino12ct.lib
                //             atom.partial_charge = Some(-0.804100);
                //             found = true;
                //         }
                //         _ => return Err(ParamError::new("Error populating FF type: OXT atom-in-res type,\
                //         not at the C terminal")),
                //     }
                // }
                _ => (),
            }

            // i.e. if still not found after our specific workarounds above.
            if !found {
                return Err(ParamError::new(&format!(
                    "Error assigning FF type and q based on atom type in res: {atom}",
                )));
            }
        }
    }

    Ok(())
}

/// Perform MD on the ligand, with nearby protein (receptor) atoms, from the docking setup as static
/// non-bonded contributors. (Vdw and coulomb)
pub fn build_dynamics_docking(
    dev: &ComputationDevice,
    lig: &mut Ligand,
    setup: &DockingSetup,
    ff_params: &FfParamSet,
    n_steps: u32,
    dt: f64,
) -> Result<MdState, ParamError> {
    println!("Building docking dyanmics...");

    lig.pose.conformation_type = ConformationType::AbsolutePosits;

    let mut md_state = MdState::new_docking(
        &lig.molecule.atoms,
        &lig.atom_posits,
        &lig.molecule.adjacency_list,
        &lig.molecule.bonds,
        &setup.rec_atoms_near_site,
        ff_params,
        TEMP_TGT_DEFAULT,
        &lig.molecule.ident,
    )?;

    let start = Instant::now();

    for _ in 0..n_steps {
        md_state.step(dt)
    }

    let elapsed = start.elapsed();
    println!("MD complete in {:.2} s", elapsed.as_secs());

    for (i, atom) in md_state.atoms.iter().enumerate() {
        lig.atom_posits[i] = atom.posit;
    }
    change_snapshot_docking(lig, &md_state.snapshots[0], &mut None);

    Ok(md_state)
}

impl MdState {
    /// For a dynamic ligand, and static (set of a) peptide.
    pub fn new_docking(
        atoms: &[Atom],
        atom_posits: &[Vec3],
        adjacency_list: &[Vec<usize>],
        bonds: &[Bond],
        atoms_static: &[Atom],
        ff_params: &FfParamSet,
        temp_target: f64,
        lig_ident: &str,
        // todo: Temperature/thermostat.
    ) -> Result<Self, ParamError> {
        let mut hydrogen_md_type = HydrogenMdType::Fixed(Vec::new());

        let Some(ff_params_lig_keyed) = &ff_params.lig_general else {
            return Err(ParamError::new("MD failure: Missing lig general params"));
        };
        let Some(ff_params_prot_keyed) = &ff_params.prot_general else {
            return Err(ParamError::new(
                "MD failure: Missing prot params general params",
            ));
        };

        // Assign FF type and charge to protein atoms; FF type must be assigned prior to initializing `ForceFieldParamsIndexed`.
        // (Ligand atoms will already have FF type assigned).

        let ff_params_keyed_lig_specific = match ff_params.lig_specific.get(lig_ident) {
            Some(l) => l,
            None => return Err(ParamError::new("Missing lig-specific (FRCMOD) parameters")),
        };

        // Convert FF params from keyed to index-based.
        println!("\nBuilding FF params indexed ligand for docking...");
        let ff_params_non_static = ForceFieldParamsIndexed::new(
            ff_params_lig_keyed,
            Some(ff_params_keyed_lig_specific),
            atoms,
            bonds,
            adjacency_list,
            &mut hydrogen_md_type,
        )?;

        // This assumes nonbonded interactions only with external atoms; this is fine for
        // rigid protein models, and is how this is currently structured.
        let bonds_static = Vec::new();
        let adj_list_static = Vec::new();

        println!("\nBuilding FF params indexed static for docking...");
        let ff_params_static = ForceFieldParamsIndexed::new(
            ff_params_prot_keyed,
            None,
            atoms_static,
            &bonds_static,
            &adj_list_static,
            &mut hydrogen_md_type,
        )?;

        // We are using this approach instead of `.into`, so we can use the atom_posits from
        // the positioned ligand. (its atom coords are relative; we need absolute)
        let mut atoms_dy = Vec::with_capacity(atoms.len());
        for (i, atom) in atoms.iter().enumerate() {
            atoms_dy.push(AtomDynamics::new(
                atom,
                atom_posits,
                &ff_params_non_static,
                i,
            )?);
        }

        let mut atoms_dy_static = Vec::with_capacity(atoms_static.len());
        let atom_posits_static: Vec<_> = atoms_static.iter().map(|a| a.posit).collect();

        // for (i, atom) in atoms_external.iter().enumerate() {
        for (i, atom) in atoms_static.iter().enumerate() {
            atoms_dy_static.push(AtomDynamics::new(
                atom,
                &atom_posits_static,
                &ff_params_static,
                i,
            )?);
        }

        let result = Self::new(
            MdMode::Docking,
            atoms_dy,
            atoms_dy_static,
            ff_params_non_static,
            temp_target,
            hydrogen_md_type,
            adjacency_list.to_vec(),
        );

        Ok(result)
    }

    /// For a dynamic peptide, and no ligand. There is no need to filter by hetero only
    /// atoms upstream.
    pub fn new_peptide(
        atoms: &[Atom],
        atom_posits: &[Vec3],
        bonds: &[Bond],
        ff_params: &FfParamSet,
        temp_target: f64,
        // todo: Thermostat.
    ) -> Result<Self, ParamError> {
        let mut hydrogen_md_type = HydrogenMdType::Fixed(Vec::new());

        let Some(ff_params_prot_keyed) = &ff_params.prot_general else {
            return Err(ParamError::new(
                "MD failure: Missing prot params general params",
            ));
        };

        // Assign FF type and charge to protein atoms; FF type must be assigned prior to initializing `ForceFieldParamsIndexed`.
        // (Ligand atoms will already have FF type assigned).

        let atoms: Vec<_> = atoms.iter().filter(|a| !a.hetero).cloned().collect();

        // Re-assign bond indices. The original indices no longer work due to the filter above, but we
        // can still use serial numbers to reassign.
        let mut bonds_filtered = Vec::new();
        for bond in bonds {
            let mut atom_0 = None;
            let mut atom_1 = None;
            for (i, atom) in atoms.iter().enumerate() {
                if bond.atom_0_sn == atom.serial_number {
                    atom_0 = Some(i);
                } else if bond.atom_1_sn == atom.serial_number {
                    atom_1 = Some(i);
                }
            }

            if atom_0.is_some() && atom_1.is_some() {
                bonds_filtered.push(Bond {
                    atom_0: atom_0.unwrap(),
                    atom_1: atom_1.unwrap(),
                    ..bond.clone()
                })
            } else {
                return Err(ParamError::new(
                    "Problem remapping bonds to filtered atoms.",
                ));
            }
        }

        let adjacency_list = build_adjacency_list(&bonds_filtered, atoms.len());

        // Convert FF params from keyed to index-based.
        println!("\nBuilding FF params indexed for peptide...");
        let ff_params_non_static = ForceFieldParamsIndexed::new(
            ff_params_prot_keyed,
            None,
            &atoms,
            &bonds_filtered,
            &adjacency_list,
            &mut hydrogen_md_type,
        )?;

        let mut atoms_dy = Vec::with_capacity(atoms.len());
        for (i, atom) in atoms.iter().enumerate() {
            atoms_dy.push(AtomDynamics::new(
                atom,
                atom_posits,
                &ff_params_non_static,
                i,
            )?);
        }

        let result = Self::new(
            MdMode::Peptide,
            atoms_dy,
            Vec::new(),
            ff_params_non_static,
            temp_target,
            hydrogen_md_type,
            adjacency_list.to_vec(),
        );

        Ok(result)
    }
}

/// Perform MD on the peptide (protein) only. Can be very computationally intensive due to the large
/// number of atoms.
pub fn build_dynamics_peptide(
    dev: &ComputationDevice,
    mol: &mut Molecule,
    ff_params: &FfParamSet,
    n_steps: u32,
    dt: f64,
) -> Result<MdState, ParamError> {
    println!("Building peptide dynamics...");

    let posits: Vec<_> = mol.atoms.iter().map(|a| a.posit).collect();

    let mut md_state =
        MdState::new_peptide(&mol.atoms, &posits, &mol.bonds, ff_params, TEMP_TGT_DEFAULT)?;

    let start = Instant::now();

    for _ in 0..n_steps {
        md_state.step(dt)
    }

    let elapsed = start.elapsed();
    println!("MD complete in {:.2} s", elapsed.as_secs());

    change_snapshot_peptide(mol, &md_state.atoms, &md_state.snapshots[0]);

    Ok(md_state)
}

/// Set ligand atom positions to that of a snapshot. We assume a rigid receptor.
/// Body masses are separate from the snapshot, since it's invariant.
pub fn change_snapshot_docking(
    lig: &mut Ligand,
    snapshot: &SnapshotDynamics,
    energy_disp: &mut Option<BindingEnergy>,
) {
    lig.pose.conformation_type = ConformationType::AbsolutePosits;
    lig.atom_posits = snapshot.atom_posits.iter().map(|p| (*p).into()).collect();
    // *energy_disp = snapshot.energy.clone();
}

pub fn change_snapshot_peptide(
    mol: &mut Molecule,
    atoms_dy: &[AtomDynamics],
    snapshot: &SnapshotDynamics,
) {
    let mut posits = Vec::with_capacity(mol.atoms.len());

    // todo: This is slow. Use a predefined mapping; much faster.
    // If the atom's SN is present in the snap, use it; otherwise, use the original posit (e.g. hetero)
    for atom in &mol.atoms {
        let mut found = false;
        for (i_dy, atom_dy) in atoms_dy.iter().enumerate() {
            if atom_dy.serial_number == atom.serial_number {
                posits.push(snapshot.atom_posits[i_dy]);
                found = true;
                break;
            }
        }
        if !found {
            posits.push(atom.posit); // Fallback to the orig.
        }
    }

    mol.atom_posits = Some(posits);
}

impl MdState {
    pub fn new(
        mode: MdMode,
        atoms_dy: Vec<AtomDynamics>,
        atoms_static: Vec<AtomDynamics>,
        ff_params_non_static: ForceFieldParamsIndexed,
        temp_target: f64,
        hydrogen_md_type: HydrogenMdType,
        adjacency_list: Vec<Vec<usize>>,
    ) -> Self {
        let cell = {
            let (mut min, mut max) = (Vec3::splat(f64::INFINITY), Vec3::splat(f64::NEG_INFINITY));
            for a in &atoms_dy {
                min = min.min(a.posit);
                max = max.max(a.posit);
            }
            let pad = 15.0; // Å
            let lo = min - Vec3::splat(pad);
            let hi = max + Vec3::splat(pad);

            println!("Initizing sim box. L: {lo} H: {hi}");

            SimBox {
                bounds_low: lo,
                bounds_high: hi,
            }
        };

        let mut result = Self {
            mode,
            atoms: atoms_dy,
            adjacency_list: adjacency_list.to_vec(),
            atoms_static,
            cell,
            nonbonded_exclusions: HashSet::new(),
            nonbonded_scaled: HashSet::new(),
            force_field_params: ff_params_non_static,
            temp_target,
            hydrogen_md_type,
            ..Default::default()
        };

        result.water = make_water_mols(
            &cell,
            result.temp_target,
            &result.atoms,
            &result.atoms_static,
        );
        result.water_pme_sites_forces = vec![[Vec3::new_zero(); 3]; result.water.len()];

        result.setup_nonbonded_exclusion_scale_flags();

        let mut water_atoms = Vec::with_capacity(result.water.len());
        // todo: Fix this clone.
        for mol in &result.water {
            water_atoms.push(mol.o.clone());
        }

        build_neighbors(
            &mut result.neighbors_nb.dy_dy,
            &result.atoms,
            &result.atoms,
            &result.cell,
            true,
        );
        build_neighbors(
            &mut result.neighbors_nb.dy_static,
            &result.atoms,
            &result.atoms_static,
            &result.cell,
            false,
        );
        build_neighbors(
            &mut result.neighbors_nb.dy_water,
            &result.atoms,
            &water_atoms,
            &result.cell,
            false,
        );
        build_neighbors(
            &mut result.neighbors_nb.water_static,
            &water_atoms,
            &result.atoms_static,
            &result.cell,
            false,
        );
        build_neighbors(
            &mut result.neighbors_nb.water_water,
            &water_atoms,
            &water_atoms,
            &result.cell,
            true,
        );

        // todo: Helper; DRY between this and during steps
        // Now invert dy_water -> water_dy
        let n_water = water_atoms.len();
        result.neighbors_nb.water_dy = vec![Vec::new(); n_water];

        for (dyn_idx, waters) in result.neighbors_nb.dy_water.iter().enumerate() {
            for &water_idx in waters {
                result.neighbors_nb.water_dy[water_idx].push(dyn_idx);
            }
        }

        // Sets up initial values, and does the only pushes; we set by index after.
        for a in &result.atoms {
            result.neighbors_nb.ref_pos_dyn.push(a.posit);
        }
        for m in &result.water {
            result.neighbors_nb.ref_pos_water_o.push(m.o.posit);
        }

        // Set up our LJ cache.
        if result.step_count == 0 {
            for i in 0..result.atoms.len() {
                for &j in &result.neighbors_nb.dy_dy[i] {
                    if j < i {
                        // Prevents duplication of the pair in the other order.
                        continue;
                    }

                    non_bonded::setup_lj_cache(
                        &result.atoms[i],
                        &result.atoms[j],
                        Some((i, j)),
                        None,
                        None,
                        &mut result.lj_table,
                        &mut result.lj_table_static,
                        &mut result.lj_table_water,
                    );
                }
            }

            for (i_lig, a_lig) in result.atoms.iter_mut().enumerate() {
                // Force from static atoms.
                for (i_static, a_static) in result.atoms_static.iter().enumerate() {
                    non_bonded::setup_lj_cache(
                        a_lig,
                        a_static,
                        None,
                        Some((i_lig, i_static)),
                        None,
                        &mut result.lj_table,
                        &mut result.lj_table_static,
                        &mut result.lj_table_water,
                    );
                }

                // Force from water
                if !result.water.is_empty() {
                    // Each water is identical, so we only need to do this once.
                    for a_water_src in [
                        &result.water[0].o,
                        &result.water[0].m,
                        &result.water[0].h0,
                        &result.water[0].h1,
                    ] {
                        non_bonded::setup_lj_cache(
                            a_lig,
                            a_water_src,
                            None,
                            None,
                            Some(i_lig),
                            &mut result.lj_table,
                            &mut result.lj_table_static,
                            &mut result.lj_table_water,
                        );
                    }
                }
            }
        }

        result
    }

    /// We use this to set up optimizations defined in the Amber reference manual. `excluded` deals
    /// with sections were we skip coulomb and Vdw interactions for atoms separated by 1 or 2 bonds. `scaled14` applies a force
    /// scaler for these interactions, when separated by 3 bonds.
    fn setup_nonbonded_exclusion_scale_flags(&mut self) {
        // Helper to store pairs in canonical (low,high) order
        let push = |set: &mut HashSet<(usize, usize)>, i: usize, j: usize| {
            if i < j {
                set.insert((i, j));
            } else {
                set.insert((j, i));
            }
        };

        // 1-2
        for indices in &self.force_field_params.bonds_topology {
            push(&mut self.nonbonded_exclusions, indices.0, indices.1);
        }

        // 1-3
        for (indices, _) in &self.force_field_params.angle {
            push(&mut self.nonbonded_exclusions, indices.0, indices.2);
        }

        // 1-4. We do not count improper dihedrals here.
        for (indices, _) in &self.force_field_params.dihedral {
            push(&mut self.nonbonded_scaled, indices.0, indices.3);
        }

        // Make sure no 1-4 pair is also in the excluded set
        for p in &self.nonbonded_scaled {
            self.nonbonded_exclusions.remove(p);
        }
    }
}
